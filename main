#include <windows.h>
#include <math.h>
#ifdef __APPLE__
#include <GL/glut.h>

#include <stdlib.h>

float transx = 0.0;   // valares para inicializacao
float transy = 0.0;   // valares para inicializacao

float escx = 1.0;
float escy = 1.0;
      
// Recricacao das funcoes de vertices
// vt1x -> vertice1emX
// vt1x -> vertice1emX

float vertice1emX, vertice1emY, vertice2emX, vertice2emY, vertice3emX, vertice3emY,vertice4emX, vertice4emY,vertice5emX, vertice5emY,vertice6emX, vertice6emY;

void DesenhaCena(){
    glClear(GL_COLOR_BUFFER_BIT);

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    gluOrtho2D(-10, 10, -10, 10);

    glColor3f(1.0, 0.0, 0.0);

    // Corpo do helicóptero
    glBegin(GL_POLYGON);
        glColor3f(0.5, 0.5, 0.0);
        glVertex2f(vertice1emX+3.8*escx+transx, vertice1emY+1.5*escy+transy); //1
        glVertex2f(vertice1emX+3.6*escx+transx, vertice1emY+1*escy+transy); // 2
        glVertex2f(vertice1emX+3.8*escx+transx, vertice1emY+-1.5*escy+transy);//3
        glVertex2f(vertice1emX+4.3*escx+transx, vertice1emY+-1.5*escy+transy); // 4
        glVertex2f(vertice1emX+4.5*escx+transx, vertice1emY+1.0*escy+transy); //5
        glVertex2f(vertice1emX+4.3*escx+transx, vertice1emY+1.5*escy+transy); //6
    glEnd();


    // Hélice
    glBegin(GL_TRIANGLES);
        glColor3f(0.5, 0.0, 0.0);
        glVertex2f(vertice1emX+3.6*escx+transx, vertice1emY+3.5*escy+transy);
        glVertex2f(vertice1emX+4.6*escx+transx, vertice1emY+3.5*escy+transy);
        glVertex2f(vertice1emX+4.0*escx+transx, vertice1emY+0.0*escy+transy);
    glEnd();

    //helice 1
    glBegin(GL_TRIANGLES);
        glColor3f(0.5, 0.0, 0.0);
        glVertex2f(vertice1emX+3.6*escx+transx, vertice1emY-3.5*escy+transy);
        glVertex2f(vertice1emX+4.6*escx+transx, vertice1emY-3.5*escy+transy);
        glVertex2f(vertice1emX+4.0*escx+transx, vertice1emY+0.0*escy+transy);
    glEnd();
    glutSwapBuffers();

}


void Inicio(){
    //cor de fundo
    glClearColor(250.0, 250.0, 250.0, 0.0);
    vertice1emX = -1.0;
    vertice1emY = -1.0;
    vertice2emX = 1.0;
    vertice2emY = -1.0;
    vertice3emX = 0.0;
    vertice3emY = 1.0;
}

// promove movimento de rotacao
void Rotacao(float angulo){
    angulo = (angulo * 3.14)/180.0;

    float auxX = 0.0;
    float auxY = 0.0;

    auxX = vertice1emX * cos(angulo) - vertice1emY * sin(angulo);
    auxY = vertice1emX * sin(angulo) + vertice1emY * cos(angulo);
    vertice1emX = auxX;
    vertice1emY = auxY;

    auxX = vertice2emX * cos(angulo) - vertice2emY * sin(angulo);
    auxY = vertice2emX * sin(angulo) + vertice2emY * cos(angulo);
    vertice2emX = auxX;
    vertice2emY = auxY;

    auxX = vertice3emX * cos(angulo) - vertice3emY * sin(angulo);
    auxY = vertice3emX * sin(angulo) + vertice3emY * cos(angulo);
    vertice3emX = auxX;
    vertice3emY = auxY;

    auxX = vertice4emX * cos(angulo) - vertice4emY * sin(angulo);
    auxY = vertice4emX * sin(angulo) + vertice4emY * cos(angulo);
    vertice4emX = auxX;
    vertice4emY = auxY;

    auxX = vertice5emX * cos(angulo) - vertice5emY * sin(angulo);
    auxY = vertice5emX * sin(angulo) + vertice5emY * cos(angulo);
    vertice5emX = auxX;
    vertice5emY = auxY;

    auxX = vertice6emX * cos(angulo) - vt6y * sin(angulo);
    auxY = vertice6emX * sin(angulo) + vt6y * cos(angulo);
    vertice6emX = auxX;
    vt6y = auxY;


}
// funcao para validacao de teclas direcionais
void Setas(int tecla, int x, int y){
    if(tecla == GLUT_KEY_UP){
        transy += 0.5;
    }
    else{
        if(tecla == GLUT_KEY_DOWN){
                transy -= 0.5;
        }
        else{
            if(tecla == GLUT_KEY_RIGHT){
                    transx += 0.5;
            }
            else {
                if(tecla == GLUT_KEY_LEFT){
                        transx -= 0.5;
                }
                else{
                    if(tecla == GLUT_KEY_F1){
                        Rotacao(10.0);
                    }
                    else{
                        if(tecla == GLUT_KEY_F2){
                            Rotacao(-10.0);
                        }
                    }
                }
            }
        }
    }
    glutPostRedisplay();
}

// funcao para validacao de teclas normais
void TeclasNormais(unsigned char tecla, int x, int y){
    if(tecla == 'A' || tecla == 'a'){
        escx += 0.5;
        escy += 0.5;
    }
    else{
        if(tecla == 'D' || tecla == 'd'){
            escx -= 0.5;
            escy -= 0.5;
        }
    }
    if(tecla == 'R' || tecla == 'r'){
        transx = 0.0;
        transy = 0.0;
        escx = 1.0;
        escy = 1.0;
        }

    glutPostRedisplay();
}

// main!
int main(int argc, char *argv[]){

    glutInit(&argc, argv);

    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);

    glutInitWindowSize(800, 800);   // definicao do formato da tela

    glutCreateWindow("Trabalho 1 - Alexandre & Sibila");

    glutSpecialFunc(Setas);          // criacao validacao de teclas
    glutKeyboardFunc(TeclasNormais); // criacao validacao de teclas

    glutDisplayFunc(DesenhaCena);    // chamada da cena

    Inicio();                        // comecando

    glutMainLoop();
}
